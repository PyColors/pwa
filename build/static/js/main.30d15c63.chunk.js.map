{"version":3,"sources":["logo.svg","types.js","Alert.js","App.js","serviceWorker.js","reducers.js","store.js","index.js"],"names":["module","exports","SW_INIT","SW_UPDATE","Alert","text","buttonText","type","onClick","dispatch","useDispatch","useEffect","timer","setTimeout","clearTimeout","className","App","isServiceWorkerInitialized","useSelector","state","serviceWorkerInitialized","isServiceWorkerUpdated","serviceWorkerUpdated","serviceWorkerRegistration","registrationWaiting","waiting","postMessage","addEventListener","e","target","window","location","reload","src","logo","alt","JSON","stringify","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","rootReducer","action","payload","configureStore","store","createStore","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,qLCA9BC,G,MAAU,WACVC,EAAY,YCuBVC,G,MAnBD,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACjCC,EAAWC,cAWjB,OATAC,qBAAU,WACR,IAAKH,EAAS,CACZ,IAAMI,EAAQC,YAAW,WACvBJ,EAAS,CAAEF,WACV,KACH,OAAO,kBAAMO,aAAaF,OAE3B,IAGD,yBAAKG,UAAU,SACZV,EADH,IACUC,GAAc,4BAAQE,QAASA,GAAUF,M,uBC8CxCU,MAzDf,WACE,IAAMC,EAA6BC,aACjC,SAAAC,GAAK,OAAIA,EAAMC,4BAEXC,EAAyBH,aAC7B,SAAAC,GAAK,OAAIA,EAAMG,wBAEXC,EAA4BL,aAChC,SAAAC,GAAK,OAAIA,EAAMI,6BAiBjB,OACE,yBAAKR,UAAU,OACZ,IADH,OAGE,yBAAKA,UAAU,aACZE,GACC,kBAAC,EAAD,CACEZ,KAAK,mDACLE,KAAML,IAGTmB,GACC,kBAAC,EAAD,CACEhB,KAAK,oCACLC,WAAW,SACXC,KAAMJ,EACNK,QA9BkB,WAC1B,IAAMgB,EAAsBD,EAA0BE,QAElDD,IACFA,EAAoBE,YAAY,CAAEnB,KAAM,iBAExCiB,EAAoBG,iBAAiB,eAAe,SAAAC,GAC3B,cAAnBA,EAAEC,OAAOV,OACXW,OAAOC,SAASC,iBA0BpB,4BAAQjB,UAAU,cAChB,yBAAKkB,IAAKC,IAAMnB,UAAU,WAAWoB,IAAI,SACzC,yDAC8B,IAC3BC,KAAKC,UAAUpB,IAElB,sDAA4BmB,KAAKC,UAAUhB,OC/C7CiB,EAAcC,QACW,cAA7BT,OAAOC,SAASS,UAEe,UAA7BV,OAAOC,SAASS,UAEhBV,OAAOC,SAASS,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhC,QACf0B,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,kBC5ElDC,MAlBf,WAA0C,IAArB1C,EAAoB,uDAAZ,GAAI2C,EAAQ,uCACvC,OAAQA,EAAOvD,MACb,KAAKL,EACH,OAAO,eACFiB,EADL,CAEEC,0BAA2BD,EAAMC,2BAErC,KAAKjB,EACH,OAAO,eACFgB,EADL,CAEEG,sBAAuBH,EAAMG,qBAC7BC,0BAA2BuC,EAAOC,UAEtC,QACE,OAAO5C,ICJE6C,ICFTC,EDNN,WACE,OAAOC,YAAYL,EAAa,CAC9BzC,0BAA0B,EAC1BE,sBAAsB,EACtBC,0BAA2B,OCEjByC,GAEdG,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,OAEFI,SAASC,eAAe,SHMnB,SAAkB1B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI0B,IAAIC,GAAwB1C,OAAOC,SAAS0C,MACpDC,SAAW5C,OAAOC,SAAS2C,OAIvC,OAGF5C,OAAOH,iBAAiB,QAAQ,WAC9B,IAAMgB,EAAK,UAAM6B,GAAN,sBAEPlC,IAgEV,SAAiCK,EAAOC,GAEtC+B,MAAMhC,EAAO,CACXiC,QAAS,CAAE,iBAAkB,YAE5B5B,MAAK,SAAA6B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CpC,UAAUC,cAAcoC,MAAMlC,MAAK,SAAAC,GACjCA,EAAakC,aAAanC,MAAK,WAC7BlB,OAAOC,SAASC,eAKpBU,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFA4B,CAAwBzC,EAAOC,GAI/BC,UAAUC,cAAcoC,MAAMlC,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OG5B/BE,CAAuB,CACrBY,UAAW,kBAAMO,EAAMxD,SAAS,CAAEF,KAAML,KACxCuD,SAAU,SAAAR,GAAY,OACpBgB,EAAMxD,SAAS,CAAEF,KAAMJ,EAAW4D,QAASd,S","file":"static/js/main.30d15c63.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const SW_INIT = 'SW_INIT';\nexport const SW_UPDATE = 'SW_UPDATE';\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport './Alert.css';\n\nconst Alert = ({ text, buttonText, type, onClick }) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!onClick) {\n      const timer = setTimeout(() => {\n        dispatch({ type });\n      }, 6000);\n      return () => clearTimeout(timer);\n    }\n  }, []);\n\n  return (\n    <div className=\"alert\">\n      {text} {buttonText && <button onClick={onClick}>{buttonText}</button>}\n    </div>\n  );\n};\n\nexport default Alert;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { SW_INIT, SW_UPDATE } from \"./types\";\nimport Alert from \"./Alert\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  const isServiceWorkerInitialized = useSelector(\n    state => state.serviceWorkerInitialized\n  );\n  const isServiceWorkerUpdated = useSelector(\n    state => state.serviceWorkerUpdated\n  );\n  const serviceWorkerRegistration = useSelector(\n    state => state.serviceWorkerRegistration\n  );\n\n  const updateServiceWorker = () => {\n    const registrationWaiting = serviceWorkerRegistration.waiting;\n\n    if (registrationWaiting) {\n      registrationWaiting.postMessage({ type: \"SKIP_WAITING\" });\n\n      registrationWaiting.addEventListener(\"statechange\", e => {\n        if (e.target.state === \"activated\") {\n          window.location.reload();\n        }\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {\" \"}\n      coco\n      <div className=\"App-alert\">\n        {isServiceWorkerInitialized && (\n          <Alert\n            text=\"Service Worker is initialized for the first time\"\n            type={SW_INIT}\n          />\n        )}\n        {isServiceWorkerUpdated && (\n          <Alert\n            text=\"There is a new version available.\"\n            buttonText=\"Update\"\n            type={SW_UPDATE}\n            onClick={updateServiceWorker}\n          />\n        )}\n      </div>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          isServiceWorkerInitialized:{\" \"}\n          {JSON.stringify(isServiceWorkerInitialized)}\n        </p>\n        <p>isServiceWorkerUpdated: {JSON.stringify(isServiceWorkerUpdated)}</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SW_INIT, SW_UPDATE } from './types';\n\nfunction rootReducer(state = {}, action) {\n  switch (action.type) {\n    case SW_INIT:\n      return {\n        ...state,\n        serviceWorkerInitialized: !state.serviceWorkerInitialized,\n      };\n    case SW_UPDATE:\n      return {\n        ...state,\n        serviceWorkerUpdated: !state.serviceWorkerUpdated,\n        serviceWorkerRegistration: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;\n","import { createStore } from 'redux';\n\nimport rootReducer from './reducers';\n\nfunction configureStore() {\n  return createStore(rootReducer, {\n    serviceWorkerInitialized: false,\n    serviceWorkerUpdated: false,\n    serviceWorkerRegistration: null,\n  });\n}\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store';\nimport { SW_INIT, SW_UPDATE } from './types';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register({\n  onSuccess: () => store.dispatch({ type: SW_INIT }),\n  onUpdate: registration =>\n    store.dispatch({ type: SW_UPDATE, payload: registration }),\n});\n"],"sourceRoot":""}